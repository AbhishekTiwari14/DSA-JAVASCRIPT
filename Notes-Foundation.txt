TC:
->O(1>logN>N>NlogN>N*2)

Objects: 
->Insert, Delete, Access -> O(1) but Search -> O(N)
->Object Methods: Object.keys(), .values(), .entries() -> O(N), objName.hasOwnProperty("keyName") -> O(1)

Arrays:
-> Insert, Delete -> O(N)(except when done at last index ,ie, push/pop), Access -> O(1), Search -> O(1)
-> Array Methods -> puh, pop -> O(1), sort -> O(N*logN), others(shift,unshift,concat,slice,splice,forEach,map,reduce,filter,indexOf,includes,etc.)-> O(N) 

.........................................................................
COMMON PATTERNS:

(1) Frequency Counter:
->  using hashmap/object/set to store frequeny of elements where elements = keys & their frequencies(count of no. of appearances of particular key) as values
-> Makes TC: O(N^2) To TC: O(N) + SC: O(N) 

(2) Multiple Pointers: 
-> two pointers: i, j: TC: O(N^2) -> O(N), SC: O(1)

(3) Sliding Window: 
-> create initial window of a particular size & keep sliding the window untill end of array while maintating the same size of window.
-> specially useful for Qs. involving subarray/substring 
-> Makes TC: O(N^2) -> O(N) & SC: O(1)

(4) Divide & Conquer: Ex.) Binary Search: TC: O(N) -> O(logN)

..........................................................................
RECURSION:

-> Base Case(s) & Recursive fxn. calls
-> usecase: json.stringify()/parse(), DOM Traversal, Object Traversal uses recursion under-the-hood
-> Helper fxn.(separate fxn. to execute recursion) can be used to improve readabililty

...........................................................................
SEARCHING ALGOS:

-> Linear Search: simple for loop -> TC: O(N)
-> Binary Search: Only works for "SORTED" arrays. Eliminates half of search space(left side or right side of mid) on each iteration. It is based on divide & conquer algo. TC: O(logN)

............................................................................
SORTING ALGOS:

-> Bubble Sort: TC: O(N^2). Adjacent values comparison. On each iteration, largest element gets into its sorted index at each inner loop traversal. Best case TC(already sorted array) = O(N)
-> Selection Sort: TC: O(N^2). Same as bubble sort but here the smallest element gets into its sorted index at each inner loop traversal
-> Insertion Sort: TC: O(N^2). Each inner loop traversal makes the left portion of current element(including itself) sorted. Best case TC(already sorted array) = O(N)

-> Merge Sort: TC: O(N*logN), SC: O(N). Divide & Conquer/Merge Algo. keep dividing array into 2 parts(from mid) untill each subarray has just 1 element. Now, while retracing the tree path, merge the two already sorted subarrays(bcoz array containing 1 element is always sorted) in a sorted manner.

-> Quick Sort: TC: O(N*logN), SC: O(N). Same as Merge Sort. Find index of Pivot element(take first element of array as PE) & put pivot element at its correct sorted index, ie, Pivot index and make sure that all elements to the left of PE are less than PE & to the right are >PE.TC = O(nlogn) but rare case: O(n^2) for already sorted array

-> Radix/Bucket Sort: TC: O(n*m) where n=no. of elements, m = max no. of digits of an element in arr, SC: O(n+m). Used only for array of integers. Does digit classifications(moving from R->L) into buckets of [0-9] and sorts the nos. a/c to their bucket classification.

.......................................................................

-> class = blueprint of objects with pre-defined properties & methods.
-> static methods apply to the class & not the instances of the class(ie, objects) 

........................................................................
LINKED LIST: 
-> TC: Insertion/Deletion at head: O(1), Search/access: O(N).
-> Non-contegous DS. Each node stores (data, next) where next = pointer to next node. 
-> Array v/s LL: Insertion/Deletion at head: LL=>O(1), array=>O(N); Search/access: LL=>O(N), array=>O(1).
-> push=> insert at tail, pop=> remove from tail, unshift=> insert at head, shift=> remove from head  

.........................................................................
STACKS:
-> TC: Insertion/Removal: O(1), Search/Access: O(N)
-> LIFO(Last In First Out).

QUEUES:
-> TC: Insertion/Removal: O(1), Search/Access: O(N)
-> FIFO(First In First Out)

.........................................................................
BINARY TREES:
-> TC:
-> Terminologies: (1) Root = Top Node of Tree; (2) Leaf = Node with no child; (3) Edge = Line connecting parent with its children
-> Binary Tree => Each parent can have atmost 2 children
->  BST(Binary Search Tree) = Special case of BT where For each node, all elements in its left subtree are less than the node's value, and all elements in its right subtree are greater than the node's value. This property ensures that the elements in the tree are stored in a "sorted" order.
-> BFS(Breadth First Search/Traversal): 
-> DFS(Depth First Search/Traversal):  (1)Preorder: Root,Left,Right (2)InOrder: Left,Root,Right (3)Postorder: Left,Right,Root
-> TC of BFS & DFS = SAME = O(N) (ie, worst case, we have to traverse the whole tree). SC: for a wide tree SC(BFS<DFS) & for a deep tree SC(BFS>DFS)
........................................................................
BST:
-> TC: Insertion: O(logN); Search: O(logN) but worst case TC: O(N) when BST = LL.
-> The siblings are always in ascending order(leftmost sibling = smallet & rightmost sibling = largest)
...................................................................................
BINARY HEAPS:
-> TC: Insertion/Deletion: O(logN), Search: O(N)
-> Similar to BST (max 2 children)
-> MaxBinaryHeap: Parent Node > All Child Nodes
-> MinBinaryHeap: Parent Node < All Child Nodes
-> stored as array. (Root node at i=0)
-> Parent Node at index 'n' => its left child @ index '2n+1' & right child @ '2n+2' 
-> Child Node at index 'n' => its parent node @ index 'floor(n/2 - 1)' 
-> Heap is always "Tightly Packed", ie, A heap cannot take structure of a LL with >3 elements

Priority Queue:
-> Data Structure where elements are arranged in the order of their value(or some other parameter & not value).
-> Each node has {val, prority}; prority = 1 => highest priority. So we create priority queue using ,MinHeap where position of node is decided by priority.  